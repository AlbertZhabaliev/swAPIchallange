{"version":3,"sources":["serviceWorker.js","SearchBox.js","Card.js","dataList.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","_ref","schange","react_default","a","createElement","className","type","placeholder","onChange","Card","name","height","gender","mass","alt","src","concat","Datalist","data","cardComponent","map","users","i","src_Card","key","Scroll","props","style","overflow","border","width","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSeachChange","event","setState","searchfield","target","value","state","_this2","fetch","then","resp","json","swItems","results","_this3","filterdata","filter","datas","toLowerCase","includes","src_SearchBox","src_Scroll","dataList","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCASC,EAhBG,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACjB,OAIIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,mCACVC,KAAK,SACLC,YAAY,cACZC,SAAUP,MCSXQ,EAlBF,SAAAT,GAAoC,IAAjCU,EAAiCV,EAAjCU,KAAMC,EAA2BX,EAA3BW,OAAQC,EAAmBZ,EAAnBY,OAAQC,EAAWb,EAAXa,KAClC,OAEIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,OAAKU,IAAI,WAAWC,IAAG,wBAAAC,OAA0BN,EAA1B,aACvBR,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,mBAAWM,GACXR,EAAAC,EAAAC,cAAA,oBAAYO,GACZT,EAAAC,EAAAC,cAAA,oBAAYQ,GACZV,EAAAC,EAAAC,cAAA,kBAAUS,MC6BXI,EAzBE,SAAAjB,GAAc,IAAXkB,EAAWlB,EAAXkB,KAGVC,EAAgBD,EAAKE,IAAI,SAACC,EAAOC,GAEnC,OACIpB,EAAAC,EAAAC,cAACmB,EAAD,CACIC,IAAKF,EACLX,OAAQO,EAAKI,GAAGX,OAChBD,KAAMQ,EAAKI,GAAGZ,KACdE,OAAQM,EAAKI,GAAGV,OAChBC,KAAMK,EAAKI,GAAGT,SAM1B,OACIX,EAAAC,EAAAC,cAAA,WACKe,ICzBEM,EATA,SAACC,GACZ,OACIxB,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBlB,OAAQ,QAASmB,MAAO,KAChFJ,EAAMK,WCmDJC,cAlDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAwBJI,cAAgB,SAACC,GACbR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAtB1CZ,EAAKa,MAAQ,CACT5B,KAAM,GACNyB,YAAa,IANPV,mFAUM,IAAAc,EAAAX,KAChBY,MAAM,gCAEDC,KAAK,SAAAC,GACF,OAAOA,EAAKC,SAEfF,KAAK,SAAAG,GACFL,EAAKL,SAAS,CAAExB,KAAMkC,EAAQC,6CAcjC,IAAAC,EAAAlB,KACCmB,EAAanB,KAAKU,MAAM5B,KAAKsC,OAAO,SAAAC,GACtC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASL,EAAKR,MAAMH,YAAYe,iBAEpE,OACIxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACwD,EAAD,CAAW3D,QAASmC,KAAKI,gBACzBtC,EAAAC,EAAAC,cAACyD,EAAD,KAEI3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAU5C,KAAMqC,aA1ClBQ,aCQlBC,IAASC,OAED/D,EAAAC,EAAAC,cAAC8D,EAAD,MAGFC,SAASC,eAAe,SN+GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.683feae7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst SearchBox = ({ schange }) => {\n    return (\n\n        //SearchBox takes the Value =(inpute here as props) and returns the macthing data Array Elemnt\n\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search data'\n                onChange={schange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox; ","import React from 'react';\n//import dataList from './dataList';\n\nconst Card = ({ name, height, gender, mass }) => {\n    return (\n\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\n            <img alt='StarWars' src={`https://robohash.org/${name}200*200`} />\n            <div>\n\n                <h2>Name: {name}</h2>\n                <p>Height: {height}</p>\n                <p>Gender: {gender}</p>\n                <p>Mass: {mass}</p>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default Card;\n\n","import React from \"react\";\nimport Card from './Card';\n// export const dataUrl =  fetch('https://swapi.co/api/people/1')\n//   .then(response => {\n//      response.json()\n//   })\n//   .then(data => {\n//     //Work with JSON data here\n//     return  data\n//   })\n\n\n// export let dataURL = fetch('https://swapi.co/api/people/1')\n//     .then(response => response.json())\n//     .then(json => dataURL = json.name);\n\n\nconst Datalist = ({ data }) => {\n    // adding loop to creat Card Component automaticly \n\n    const cardComponent = data.map((users, i) => {\n        //when dooing a loop give it a uniqe key so React keeps track of an element, if it gets deleted\n        return (\n            <Card\n                key={i}\n                height={data[i].height}\n                name={data[i].name}\n                gender={data[i].gender}\n                mass={data[i].mass}\n\n            />\n        );\n    })\n\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\n\n\nexport default Datalist;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '900px', width: '' }}>\n            {props.children}\n        </div>\n    )\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport SearchBox from './SearchBox';\nimport Datalist from './dataList';\nimport Scroll from './Scroll';\n\nclass App extends Component {\n    constructor() {\n        super();\n        // state is somthing that can change and affect the app\n        // state is usually lives in a perent component\n        this.state = {\n            data: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://swapi.co/api/people/')\n\n            .then(resp => {\n                return resp.json();\n            })\n            .then(swItems => {\n                this.setState({ data: swItems.results })\n            })\n    }\n\n    //function is made in order to establish comunication \n    //between Searchbox and Datalist\n    //pass it to Searchbox\n    //this. becouse its an Object \"this. is the App\"\n    onSeachChange = (event) => {\n        this.setState({ searchfield: event.target.value }); //method wich comes with react\n        //triggers the execution of the render method.\n\n    }\n\n    render() {\n        const filterdata = this.state.data.filter(datas => {\n            return datas.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        return (\n            <div className='tc'>\n                <h1>StarWarsAPI Challenge</h1>\n                <SearchBox schange={this.onSeachChange} />\n                <Scroll>\n\n                    <Datalist data={filterdata} />\n                </Scroll>\n\n            </div>\n        );\n    }\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n //import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './App';\n\n\n\n\n\nReactDOM.render(\n \n        <App/>\n\n     //data is also in dataList as props!!!\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}